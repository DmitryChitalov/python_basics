
#Задание 1 . Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. 
#Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений 
#необходимо запускать скрипт с параметрами.
import sys

f_obj, name_v, rate_v, hours_v = sys.argv
print(f_obj)

def calculate_salary(rate, hours):
    try:
        print(f'Сотрудник {name_v} заработал {int(rate) * int(hours) * 1.25}')
    except TypeError:
        print("Операция применена к объекту несоответствующего типа")
        exit()

calculate_salary (rate_v, hours_v)


#Задание 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].
#primary_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

res_list = [primary_list[el] for el in range(1, len(primary_list)) if primary_list[el] > primary_list[el - 1]]

print(res_list)


#Задание 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#Подсказка: используйте функцию range() и генератор.
#lst = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

print([x for x in range(20,240) if x % 20 == 0 or x % 21 ==0])


#Задание 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, 
#соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно 
#используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]

primary_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

res_List =[el for el in primary_list if primary_list.count(el) == 1] 

print(res_List)


#Задание 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 
#100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

from functools import reduce

primary_list = [x for x in range(100, 1001, 2)]

print(primary_list)

res = reduce(lambda item, item2: item * item2, primary_list)

print(f"Резулътат: {res}")


#Задача 6. Реализовать два небольших скрипта:
#итератор, генерирующий целые числа, начиная с указанного;
#итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() 
#модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. 
#Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. 
#Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.from itertools import 
#count,cycle

list_int = []

begin = int(input("Укажите первое число последователъности: "))
end = int(input("Укажите последнее число последователъности: "))

for x in count(begin):
    if x > end:
        break
    print(x)
    list_int.append(x)

print()

print(list_int)

count = 0
for item in cycle(list_int):
    if count == len(list_int):
        break
    print(item)
    count += 1


#Задача 7.Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции 
#должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение 
#факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count

def fact(n):
    factorial = 1

    for x in count(1):
        if x > n:
            break

        factorial = factorial * x
        yield factorial

n = int(input("Укажите целое неотрицателъное число: "))
i = 0

for el in fact(n):
    i += 1
    print(f"!{i} = {el}")

