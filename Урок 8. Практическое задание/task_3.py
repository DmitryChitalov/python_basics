"""
Задание 3.

Создайте собственный класс-исключение,
который должен проверять содержимое списка на наличие только чисел.

Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять
список только числами.

Класс-исключение должен контролировать типы данных элементов списка.

3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. 
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами. 
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. 
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop». 
При этом скрипт завершается, сформированный список с числами выводится на экран.

Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. 
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента. 
Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. 
При этом работа скрипта не должна завершаться.
"""
class AcceptOnlyNumbersError(Exception):
    def __init__(self, txt):
        self.txt = txt


numbers_list = []
while True:
    try:
        input_number = input("Введите, пожалуйста, число или 'stop' для остановки: ")
        if input_number == 'stop':
            break
        elif input_number.isdigit():
            numbers_list.append(int(input_number))
        else:
            raise AcceptOnlyNumbersError("На ввод принимаются только числа.")
    except AcceptOnlyNumbersError as error_message:
        print(error_message.txt)

print(numbers_list)
