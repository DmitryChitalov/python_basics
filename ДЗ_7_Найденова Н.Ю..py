#!/usr/bin/env python
# coding: utf-8

# In[ ]:


#Задание 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен 
#принимать данные (список списков) для формирования матрицы.
#Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
#Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

#31    32         3    5    32        3    5    8    3
#37    43         2    4    6         8    3    7    1
#51    86        -1   64   -8
#Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
#Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). 
#Результатом сложения должна быть новая матрица.
#Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем 
#с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    value: list

    def __init__(self, value: list):
        self.value = value

    def __add__(self, other: 'Matrix'):
        try:
            rows_count = len(self.value)
            items_count = len(self.value[0])

            new_value = [
                [
                    self.value[row][idx] + other.value[row][idx]
                    for idx in range(items_count)
                ]
                for row in range(rows_count)
            ]

            return Matrix(new_value)
        except IndexError:
            print("error - матрицы разного размера")
            exit(1)

    def __str__(self):
        return "\n".join(
            str(row).strip('[]').replace(',', '')
            for row in self.value
        )


a = Matrix([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
])

b = Matrix([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
])

c = a + b

print(c)


# In[ ]:


#Задание 2. Реализовать проект расчёта суммарного расхода ткани на производство одежды. Основная сущность (класс) этого проекта — одежда,
#которая может иметь определённое название. К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды 
#существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
#Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3).
#Проверить работу этих методов на реальных данных.Реализовать общий подсчет расхода ткани. Проверить на практике полученные на
#этом уроке знания: реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

from abc import abstractmethod


class Clothes:
    def __init__(self, name, size):
        self.name = name
        self.size = size

    @abstractmethod
    def calc(self):
        pass

    @property
    def calc(self):
        if self.name == "Coat":
            total = self.size / 6.5 + 0.5
        else:
            total = 2 * self.size + 0.3
        return total


coat = Clothes("Coat", int(input("Укажите необходимое кол-во Пальто: ")))
suite = Clothes("Suite", int(input("Укажите необходимое кол-во Костюмов: ")))


print(f"Расход ткани на пальто: {round(coat.calc, 2)}")
print(f"Расход ткани на костюм: {suite.calc}")
print(f"Общий расход ткани: {round((coat.calc + suite.calc), 2)}")


# In[ ]:


#Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе
#инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы 
#перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
#Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
#до целого) деление клеток, соответственно.
#Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
#Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
#Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, quantity):
        self.quantity = quantity

    def __str__(self):
        return f"состоит из {self.quantity}"

    def __add__(self, other):
        return self.quantity + other.quantity

    def __sub__(self, other):
        if self.quantity > other.quantity:
            return self.quantity - other.quantity

    def __mul__(self, other):
        return self.quantity * other.quantity

    def __truediv__(self, other):
        return self.quantity / other.quantity


cell1 = Cell(48)
cell2 = Cell(35)

print(f"Клетка cell1: {cell1}")
print(f"Клетка cell2: {cell2}")
print("Создаем новые клеки:")
print(f"Сумма клеток: {cell1 + cell2}")
print(f"Разность клеток: {cell1 - cell2}")
print(f"Умножение клеток: {cell1 * cell2}")
print(f"Деление клеток: {round(cell1 / cell2)}")

