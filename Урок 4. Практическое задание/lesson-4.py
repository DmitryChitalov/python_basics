"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция
расчета заработной платы сотрудника. В расчете необходимо использовать формулу:
(выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений
необходимо запускать скрипт с параметрами.
"""

from sys import argv

for_pay, hour, bet = argv

print('Количество отработанных часов', hour)
print('Ставка', bet)


def func_for_pay(hour, bet):
    prime = 600
    pay = int(bet) * int(hour) + prime
    print(f" Заработная плата равна {pay}")


func_for_pay(hour, bet)

"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка,
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
Реализуйте вариант без и с генераторным выражением
"""
c_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = []
for i in range(1, len(c_list)):
    if c_list[i] > c_list[i-1]:
        new_list.append(c_list[i])
print(new_list)


new_list_lc = [c_list[i] for i in range (1, len(c_list)) if c_list[i] > c_list[i-1] ]
print(new_list_lc)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генераторное выражение.
"""
my_list = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(my_list)

"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генераторное выржаение.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""
c_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [i for i in c_list if c_list.count(i)==1]
print(new_list)

"""
5. Реализовать формирование списка, используя функцию range()
и возможности генераторного выражения.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать лямбда-функцию и функцию reduce().
"""

from functools import reduce

new_list = [i for i in range(100, 1001) if i % 2 == 0]
print(new_list)

composition_new_list = reduce(lambda arg, arg2: arg * arg2, new_list)
print(composition_new_list)

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3,
а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие,
при котором повторение элементов списка будет прекращено.
"""

from itertools import cycle
from itertools import count

begin = int(input("Введите число для начала формирования цисел"))
for i in count(begin):
    if i < 100:
        print(i)
    else:
        break

c_list = [234, 342, 123, 321, 436, 56, 765, 12, 423, 234, 56, 956, 65]
s = 0
for i in cycle(c_list):
    if s < 1000000:
        print(i)
        print(s)
        s = s + i
    else:
        break

"""
7. Реализовать генератор с помощью функции с ключевым словом yield,
создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа,
а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n.
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24. """


def fact(n):
    fact = 1
    for i in range(1, n + 1):
        fact = fact * i
        yield (fact)


n = int(input('Введите n'))
i = 0
for el in fact(n):
    i += 1
    print(f"!{i} = {el}") 