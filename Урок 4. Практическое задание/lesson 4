"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция
расчета заработной платы сотрудника. В расчете необходимо использовать формулу:
(выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений
необходимо запускать скрипт с параметрами.
"""

from sys import argv

script_name, production_h, bet_h, prize = argv


def salary_func(production, bet, bonus):
    try:
        print(f"Заработная плата сотрудника: {float(production_h) * float(bet_h) + float(prize)}")
    except ValueError:
        print("Убедитесь, что в параметрах переданы числа!")
        exit()


salary_func(production_h, bet_h, prize)
"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка,
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
Реализуйте вариант без и с генераторным выражением
"""


my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
nogen_list = []
for el in range(1, len(my_list)):
    if my_list[el] > my_list[el - 1]:
        nogen_list.append(my_list[el])
        el += 1
    else:
        el += 1
print(nogen_list)


gen_list = [my_list[el] for el in range(1, len(my_list)) if my_list[el] > my_list[el - 1]]
print(gen_list)
"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генераторное выражение.
"""


print([i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0])
"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генераторное выржаение.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""


my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([el for el in my_list if my_list.count(el) == 1])
"""
5. Реализовать формирование списка, используя функцию range()
и возможности генераторного выражения.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать лямбда-функцию и функцию reduce().
"""


from functools import reduce
my_list = [i for i in range(100, 1001) if i % 2 == 0]
print(my_list)
print(reduce(lambda el1, el2: el1 * el2, my_list))
"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3,
а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие,
при котором повторение элементов списка будет прекращено.
"""


from itertools import count
from itertools import cycle

my_iter = []
for el in count(3):
    if el > 10:
        break
    my_iter.append(el)
    print(el)

сount = 0
for i in cycle(my_iter):
    if сount >= len(my_iter):
        break
    print(i)
    сount += 1
    """
7. Реализовать генератор с помощью функции с ключевым словом yield,
 создающим очередное значение.
 При вызове функции должен создаваться объект-генератор.
 Функция должна вызываться следующим образом: for el in fact(n).
 Функция отвечает за получение факториала числа,
 а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n.
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""


from itertools import count


def fact(n):
    factorial = 1
    for i in count(1):
        if i > n:
            break
        factorial *= i
        yield factorial


n = int(input("Введите неотрицательное целое число n: "))
if n == 0:
    print(f'Факториал 0 равен 1')
else:
    j = 0
    for el in fact(n):
        j += 1
        print(f'Факториал {j} равен {el}')
