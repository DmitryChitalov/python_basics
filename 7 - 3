Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его 
конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть 
реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (
__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, 
уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно 
осуществляться округление значения до целого числа. 
- Сложение. Объединение двух клеток. При этом число ячеек общей 
клетки должно равняться сумме ячеек исходных двух клеток. 
- Вычитание. Участвуют две клетки. Операцию необходимо 
выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. 
- Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек 
этих двух клеток. 
- Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное 
деление количества ячеек этих двух клеток. 
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку 
вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование 
ряда не хватает, то в последний ряд записываются все оставшиеся.
"""

class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        return f'Две клетки - хорошо, а одна большая - лучше! Размер клетки равен: {self.quantity + other.quantity}'

    def __sub__(self, other):
        sub = self.quantity - other.quantity
        return f'Клеточка стала меньше, теперь она равна: {sub} клеточкам' if sub > 0 else 'Клетка исчезла :('

    def __truediv__(self, other):
        return self.quantity // other.quantity

    def __mul__(self, other):
        return self.quantity * other.quantity

    def make_order(self, row):
        result = ''
        for i in range(int(self.quantity / row)):
            result += '*' * row + '\n'
        result += '*' * (self.quantity % row) + '\n'
        return result


cell = Cell(24)
cell_2 = Cell(2)
print(cell + cell_2)
print(cell - cell_2)
print(cell / cell_2)
print(cell * cell_2)
print(cell.make_order(7))
