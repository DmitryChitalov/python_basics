#!/usr/bin/env python
# coding: utf-8

# In[7]:


# Задача 1.Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у пользователя,
# предусмотреть обработку ситуации деления на ноль.

def calculator(a, b):
    try:
        return a/b
    except ZeroDivisionError as e:
        print(f'Ошибка! Делить на ноль нельзя')


print(calculator(int(input('Первое число: ')), int(input('Второе число: '))))


# In[15]:


# Задача 2.Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город
# проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Осуществить вывод данных о
# пользователе одной строкой.

def person_info(name, surname, year, city, email, telephone):
    result = f'{surname}, {name}, {year}, {city}, {email}, {telephone}'
    return result


print(person_info(surname='Быстрова', name='Мария', year='1986',
      city='Сочи', email='Bistrova_1990@mail.ru', telephone='89999999999'))


# In[17]:


# Задача 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух аргументов.

def my_func(arg1, arg2, arg3):
    print(
        f'Сумма двух наибольших аргументов равна: {arg1 + arg2 + arg3 - min([arg1, arg2, arg3])}')


my_func(
    int(input('Аргумент 1:')),
    int(input('Аргумент 2:')),
    int(input('Аргумент 3:')),
)


# In[33]:


# Задача 4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x в степень
# y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции возведения числа
# в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
def my_func(x, y):
    return (x ** y)


print(my_func(float(input('Введите число: ')), int(input('Введите степень: '))))


def my_func(x, y):
    counter = 1
    result = 1 / x
    while counter < abs(y):
        result = result * (1 / x)
        counter += 1
    return result


print(my_func(float(input('Введите число: ')), int(input('Введите степень: '))))


# In[2]:


# Задача 5.Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел будет
# добавляться к уже подсчитанной сумме.Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме
# и после этого завершить программу.
def calculate_sum(*nums):
    sum = 0
    flag = False
    for num in nums:
        try:
            if num:
                sum += float(num)
        except ValueError:
            flag = True
    return sum, flag


general_sum = 0

while True:
    numbers_string = input('Введите числа через пробел: ').split(' ')
    sum, stop_flag = calculate_sum(*numbers_string)
    general_sum += sum
    print(f'сумма {general_sum}')

    if stop_flag:
        break


# In[1]:


# Задача 6 и 7.Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной
# первой буквой. Например, print(int_func(‘text’)) -> Text.Продолжить работу над заданием. В программу должна попадать строка из
# слов, разделённых пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки,
# но каждое слово должно начинаться с заглавной буквы. Используйте написанную ранее функцию int_func().

def int_func(*args):
    word = input("Вводим слово ")
    print(word.title())
    return


int_func()


# In[18]:


# In[ ]:
