# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.


class Cell:
    def __init__(self, cells):
        self.cells = cells

    def __add__(self, other): # сложение
        return Cell(self.cells + other.cells)

    def __sub__(self, other): # вычитание
        diff = self.cells - other.cells
        if diff > 0:
            return Cell(diff)
        else:
            return 'Ошибка! Разность количества ячеек двух клеток меньше или равна нулю.'

    def __mul__(self, other): # умножение
        return Cell(self.cells * other.cells)

    def __truediv__(self, other): # деление
        return Cell(self.cells // other.cells)

    def make_order(self, row_size):  # для формирования рядов клеток
        rows, tail = divmod(self.cells, row_size)
        return '\n'.join(['*' * row_size] * rows + (['*' * tail] if tail else []))

cell1 = Cell(15)
cell2 = Cell(10)

print((cell1 + cell2).make_order(5))
print((cell1 - cell2).make_order(5)) # выводит: Ошибка! для cell1 = Cell(12), а cell2 = Cell(15) Разность количества ячеек двух клеток меньше или равна нулю.
print((cell1 * cell2).make_order(5))
print((cell1 / cell2).make_order(5))

