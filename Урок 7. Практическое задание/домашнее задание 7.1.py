# 1. Реализовать класс Matrix (матрица).
# Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, data):
        self.data = data # атрибут с двумерным списком

    def __str__(self): # перебор каждой строки матрицы, элементы строки объединяются через пробел и добавляются в результирующую строку
        result = ''
        for row in self.data:
            result += ' '.join([str(elem) for elem in row]) + '\n'
        return result

    def __add__(self, other):
        if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): # проверка размерности двух матриц
            raise ValueError("Матрицы должны быть одинаковой размерности!")
        else:
            result = []
            for i in range(len(self.data)):
                row = []
                for j in range(len(self.data[0])):
                    row.append(self.data[i][j] + other.data[i][j])# перебор каждого элемента матрицы и выполнение операции сложения
                result.append(row)
            return Matrix(result) # результатирующая матрица

# пример решения
m1 = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
m2 = Matrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]])
print(m1)
print(m2)
m3 = m1 + m2
print(m3)
